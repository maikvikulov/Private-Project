#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>
#include <unistd.h>

#define PORT 8080
#define BUFSIZE 1024

// Function for processing connections
void handle_connection(int client_sock) {
    char buffer[BUFSIZE];
    // Reading data from the client
    int bytes_read = read(client_sock, buffer, sizeof(buffer));
    if (bytes_read < 0) {
        perror("Reading error");
        close(client_sock);
        return;
    }
    buffer[bytes_read] = '\\0';

    // Here you can add logic for routing anonymous requests

    // Sending a response to the client
    send(client_sock, buffer, bytes_read, 0);
    close(client_sock);
}

int main() {
    int server_sock, client_sock;
    struct sockaddr_in server_addr, client_addr;
    socklen_t addr_len = sizeof(client_addr);

    // Creating a socket
    server_sock = socket(AF_INET, SOCK_STREAM, 0);
    if (server_sock < 0) {
        perror("Socket creation error");
        exit(EXIT_FAILURE);
    }

    // Binding a socket to an address
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(PORT);

    if (bind(server_sock, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {
        perror("Binding Error");
        close(server_sock);
        exit(EXIT_FAILURE);
    }

    // Listening for connections
    listen(server_sock, 3);
    printf("The server is running on port %d\\n", PORT);

    while (1) {
        client_sock = accept(server_sock, (struct sockaddr*)&client_addr, &addr_len);
        if (client_sock < 0) {
            perror("Connection Error");
            continue;
        }
        handle_connection(client_sock); // Обработка соединения
    }

    close(server_sock);
    return 0;
}
